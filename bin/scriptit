#!/usr/bin/env python
"""
     _  _  _ .  _  |_   . |_  | a platform for bash pipeline development
    _) (_ |  | |_) |_ - | |_  | github.com/josephdviviano/script-it
               |              |

    scriptit list modules             -- lists all available modules
    scriptit list subjects experiment -- lists all subjects in experiment
    scriptit help module              -- prints help for module
    scriptit check setup              -- checks installation
    scriptit check inputs             -- checks input files for experiment
    scriptit generate                 -- generate master script
    scriptit render script output     -- render master script to output script
    scriptit folder                   -- generate input folder structure
    scriptit clean                    -- delete output files
"""
import os, sys, stat, re
import logging
from copy import copy
from fnmatch import fnmatch
import textwrap

DIR_DATA = os.getenv('SCRIPTIT_DATA')
DIR_MODULES = os.getenv('SCRIPTIT_MODULES')
CLEARSCREEN = chr(27) + "[2J"

logging.basicConfig(level=logging.WARN, format="[%(name)s] %(levelname)s: %(message)s")
logger = logging.getLogger(os.path.basename(__file__))


def selector_float():
    """
    Prompts the user to input a floating-point number.
    """
    option = raw_input('#: ') # have the user enter a number

    # ensure response is non-negative
    if option == 'stop':
        return 'stop'
    if option == '':
        option = -1

    # check input
    try:
        if float(option) >= float(0):
            response = float(option)
            return response
        else:
            print('ERROR: input must be positive.')
            return None
    except:
        print('ERROR: input must be a float.')
        return None


def selector_int():
    """
    Prompts the user to input a integer number.
    """
    option = raw_input('#: ') # have the user enter a number

    if option == 'stop':
        return 'stop'
    if option == '':
        option = -1

    # check input
    try:
        if int(option) >= 0:
            response = int(option)
            return response
        else:
            print('ERROR: input must be positive.')
            return None
    except:
        print('ERROR: input must be an integer.')
        return None


def selector_list(item_list, sort=True):
    """
    Prompts the user to select from an item in the supplied list.
    """
    if type(item_list) != list:
        raise TypeError('ERROR: input to selector_list must be a list!')

    if sort:
        item_list.sort()

    # print the options, and their numbers
    numbered_list = []
    for i, item in enumerate(item_list):
        numbered_list.append('{}: {}'.format(str(i+1), item))
    print_list_cols(numbered_list)

    # retrieve the option number
    option = raw_input('option #: ')

    # check input
    if option == 'stop':
        return 'stop'
    if option == '':
        option = 0

    try:
        response = item_list[int(option)-1]
    except:
        print('ERROR: option # invalid.')
        return None

    if int(option) == 0:
        print('ERROR: option # invalid.')
        return None

    if response == '?':
        response = raw_input('custom input: ')
        response.strip(' ')

    return response


def print_list(lst):
    """
    Prints all the items in a list.
    """
    for item in lst:
        print('    {}'.format(item))


def print_list_cols(l):
    """
    Prints a list in two columns, real pretty like.
    """
    while len(l) % 3 != 0:
        l.append(" ")

    split = len(l)/3
    l1 = l[0:split]
    l2 = l[split:split*2]
    l3 = l[split*2:]

    l = [l1, l2, l3]

    for x in zip(*l):
        print "{0:<25s} {1:<25s} {2}".format(*x)


def has_permissions(directory):
    if os.access(directory, 7) == True:
        flag = True
    else:
        print('ERROR: No write access to directory {}'.format(directory))
        flag = False
    return flag


def check_os():
    """
    Ensures the user isn't Bill Gates.
    """
    import platform

    operating_system = platform.system()
    if operating_system == 'Windows':
        sys.exit('ERROR: Windows detected. scriptuit requires Unix-like OS.')


def touch(f):
    """
    Touches the file f. Used to create placeholders for actual stage outputs
    in scriptuit folders (to save on disk space).
    """
    with open(f, 'a'):
        os.utime(f, None)


def purge(files, replace=False):
    """
    Takes a list of filenames and attempts to remove them.
    """
    if len(files) > 0:
        for f in files:
            os.remove(f)
            if replace:
                touch(f)


def find_files(directory, include, exclude=None, level=1):
    """
    Finds all files in the given directory including some pattern, and
    excluding any directories matching some pattern if defined.
    """
    fnames = []
    assert os.path.isdir(directory)
    num_sep = directory.count(os.path.sep) # n dirs already in the supplied path
    for pth, dirs, files in os.walk(directory, topdown=True):

        # remove directories lower that n levels
        num_sep_this = pth.count(os.path.sep)
        if num_sep + level <= num_sep_this:
            del dirs[:]

        # exclude files (protected)
        if exclude:
            dirs[:] = [d for d in dirs if exclude not in d]

        for f in files:
            if include in f:
                fnames.append(os.path.join(pth, f))
    yield fnames
    return


def writer(f, p_list, command):
    """
    Writes lines to the master script.
    """
    f.write(command+'\n')
    p_list.append(command)

    return p_list


def get_date_user():
    """
    Returns a human timestamp, the UID, and a machine timestamp.
    """
    import time
    import getpass

    datetime = time.strftime("%Y/%m/%d -- %H:%M:%S")
    user = getpass.getuser()
    f_id = time.strftime("%y%m%d")

    return datetime, user, f_id


def mangle_string(string):
    """
    Turns an arbitrary string into a decent foldername/filename
    (no underscores allowed)!
    """
    string = string.replace(' ', '-')
    string = string.strip(",./;'[]\|_=+<>?:{}!@#$%^&*()`~")
    string = string.strip('"')

    return string


def get_subj(directory):
    """
    Gets all folder names (i.e., subjects) in a directory (of subjects).
    Removes hidden folders.
    """
    subjects = []
    for subj in os.walk(directory).next()[1]:
        if os.path.isdir(os.path.join(directory, subj)) == True:
            subjects.append(subj)
    subjects.sort()
    subjects = filter(lambda x: x.startswith('.') == False, subjects)

    return subjects


def get_header(filename):
    """
    Returns each line of the module header as a list.
    """
    header = []
    f = open(filename, 'rb')

    for i, l in enumerate(f.readlines()):

        # check for shebang
        if i == 0:
            if not l.startswith('#!/bin/bash'):
                raise SyntaxError('ERROR: module {} does not contain BASH shebang'.format(filename))

        # parse header until the comments dissapear
        else:
            if l[0] == '#':
                l = l.lstrip('#').rstrip('\n').strip()
                header.append(l)
            else:
                break

    return header


def get_body(filename):
    """
    Returns each line of the module body as a list.
    """
    body = []
    header = True

    f = open(filename, 'rb')

    for i, l in enumerate(f.readlines()):

        # check for shebang
        if i == 0:
            if not l.startswith('#!/bin/bash'):
                raise SyntaxError('ERROR: module {} does not contain BASH shebang'.format(filename))

        # skip header
        if header:
            if l[0] == '#':
                continue
            else:
                body.append(l)
                header = False
                continue

        body.append(l)
        #body.append(l.rstrip('\n').strip())

    return body


def get_opts(header, args):
    """
    Returns the options for the module as a list of lists.
    The options are found in square brackets in-line with each option, e.g.,
    n_repeats    Number of times to repeat operation on input [int]
    """
    options = []
    if not args:
        return None

    for arg in args:
        optline = filter(lambda x: x.split(' ')[0] == '{}:'.format(arg)
                               and x.count('[') == 1
                               and x.count(']') == 1, header)
        if len(optline) == 1:
            opt = optline[0].split('[')[1].split(']')[0]
            options.append([arg, opt])

    return options


def get_line(header, pattern):
    """
    Finds a entry in a list starting with the defined pattern. Returns
    everything else on that line as a list. Removes all empty values, if none
    are found, returns None.
    """
    for h in header:
        h = h.strip('# \n').lstrip(' ')
        if h.startswith(pattern):

            # remove empty fields, and the prereq tag
            h = filter(lambda x: '' != x, h.split(' '))
            h.remove(pattern)
            if len(h) == 0:
                return None
            else:
                return(h)


def get_rendered_module(moduleBody, line):
    """
    Takes the moduleBody list (obtained with get_body()) and the matching line
    from the master script to fill in all command-line arguments. This 'hard-
    codes' the rendered script.
    """
    for i, arg in enumerate(line.split(' ')):
        if i == 0:
            continue

        # find reference to BASH-format command line argument e.g., ${1} or $1
        regex1 = re.compile('\$\{' + str(i) + '\}')
        regex2 = re.compile('\$' + str(i))
        for j, moduleLine in enumerate(moduleBody):
            if regex1.search(moduleLine):
                moduleBody[j] = moduleLine.replace('${' + str(i) + '}', arg)
                break
            elif regex2.search(moduleLine):
                moduleBody[j] = moduleLine.replace('$' + str(i), arg)
                break
            else:
                pass

    return moduleBody


def check_match(a, b):
    """
    Checks if prerequisite a matches any item in b, ignoring cases.
    """
    for item in b:
        r = re.compile('^{}'.format(a.lower().replace('*','.*')))
        if r.match(item.lower()):
            return

    # if we get this far, nothing was matched
    raise


def check_prerequisites(prerequisites, usedModules):
    """
    For each prerequisite in the list 'prerequisites', ensures there is a
    matching entry in the list 'usedModules'. Any prerequisite can contain a
    wildcard e.g., init_*, which will accept any used module starting with
    'init_'. This isn't case sensitive.

    If this function fails for any prerequisite, it raises an exception.
    """
    for prereq in prerequisites:
        try:
            check_match(prereq, usedModules)
        except:
            raise ValueError('ERROR: prerequisite {} not met'.format(prereq))


def parse(module, usedModules=[], outputFiles=[], verbose=False):
    """
    Parses a scriptuit header. First this checks prerequisites modules have been
    run. It then records the output prefix, and asks the user a series of
    questions to fill in the module arguments.

    Returns the module name and the full string that should be passed to the
    master scriptuit file.
    """
    moduleName = os.path.basename(module)
    header  = get_header(module)
    prereq  = get_line(header, 'prereq:')
    output  = get_line(header, 'output:')
    args    = get_line(header, moduleName)
    options = get_opts(header, args)

    if verbose:
        for h in header:
            print(h)

    if args:
        n_inputs = len(filter(lambda x: 'input' == x.lower(), args))
    else:
        n_inputs = 0

    if output:
        assert len(output) == 1, 'ERROR: More than one output defined for {}'.format(moduleName)
    inputFile = None # useless default value ... to remove?

    if prereq:
        try:
            check_prerequisites(prereq, usedModules)
        except ValueError as err:
            raise

    # get the input name from the last item in the used list
    if n_inputs > 0:
        assert n_inputs == 1, 'ERROR: More than one input defined for {}'.format(moduleName)
        assert len(outputFiles) > 0, 'ERROR: module {} has input defined but no outputs have been generated yet'.format(moduleName)
        inputFile = outputFiles[-1] # always use the most recent file as input

    if verbose:
        print('# of inputs: {}'.format(n_inputs))
        print('output name: {}'.format(output))
        print('module name: {}'.format(moduleName))
        print('input name:  {}'.format(inputFile))
        print('output list: {}'.format(outputFiles))
        print('module list: {}'.format(usedModules))

    # initialize the command with the module name and input if required
    if n_inputs == 0:
        command = moduleName
    else:
        command = '{} {}'.format(moduleName, inputFile)

    if options:
        # loop through options list and build up command line
        for opt in options:

            print('\n{}: {}'.format(opt[0], ' '.join(get_line(header, '{}:'.format(opt[0])))))

            if opt[1].startswith('list'):
                response = selector_list(opt[1].split(':')[1].strip().split(' '))
            elif opt[1].startswith('float'):
                response = selector_float()
            elif opt[1].startswith('int'):
                response = selector_int()
            else:
                raise SyntaxError('ERROR: malformed option found in module {} header.'.format(moduleName))

            if response is not None:
                command = '{} {}'.format(command, response)
            else:
                raise ValueError

    # append output file name to list
    if output:
        outputFiles.append(output[0]) # output is returned as a list

    return outputFiles, command


def print_dirs(in_dir):
    """
    Prints the directories found within the input directory.
    """
    dir_list = [d for d in os.listdir(in_dir) if
                           os.path.isdir(os.path.join(in_dir, d)) == True]
    dir_list.sort()
    for d in dir_list:
        print('    + ' + d)
    if len(dir_list) == 0:
        print('None found.')


def edit_mode(mode):
    """edits single image modalities within a subject folder."""

    print('\nCurrent sessions: ')
    print_dirs(mode)

    print('\nHow many sessions should there be?')
    sessions = raw_input('Sessions: ' )

    try:
        sessions = int(sessions)
        for sess in range(sessions):
            s = sess+1
            sess_name = 'SESS' + '%02d' % s
            os.system('mkdir ' + os.path.join(mode, sess_name))

            print('\nHow many runs in session ' + '%02d' % s + '?')
            runs = raw_input('Runs: ')

            try:
                runs = int(runs)
                for run in range(runs):
                    r = run+1
                    run_name = 'RUN' + '%02d' % r
                    os.system('mkdir ' + os.path.join(mode, sess_name, run_name))
            except:
                print('Number of runs should be integer!')
    except:
        print('Number of sessions should be integer!')


def edit_subject(subject):
    """generates subject directories"""

    print('\nCurrent image modalities:')
    print_dirs(subject)

    flag = 0
    while flag == 0:
        subj_name = os.path.basename(subject)
        print('\nWhat modality would you like to edit/add for {}?'.format(subj_name))

        mode = raw_input('Mode: ')

        # make the modality folder, if it does not exist
        if os.path.isdir(os.path.join(subject, mode)) == False:
            os.system('mkdir {}'.format(os.path.join(subject, mode)))
        else:
            print('Editing existing modality {}'.format(mode))

        # edit modality, and check for the escape flag
        edit_mode(os.path.join(subject, mode))

        print('\nWould you like to continue adding modes? (y/N)')
        response = raw_input('Continue? ')

        if response in ['Y', 'y']:
            pass
        else:
            print('Finished with {}'.format(subject))
            flag = 1


def get_modules(interactive=False, used=None):
    """
    Prints the available modules. If provided with a list of 'used' modules,
    these are stripped from the output.
    """
    if not DIR_MODULES:
        logger.error('ERROR: Environment variable SCRIPTIT_MODULES not defined.')
        sys.exit(1)

    module_list = [f for f in os.listdir(DIR_MODULES)
                           if os.path.isfile(os.path.join(DIR_MODULES, f))]
    module_list.sort()

    # remove used modules from list
    if used:
        for u in used:
            try:
                module_list.remove(u)
            except:
                pass

    if interactive == True:
        try:
            selection = selector_list(module_list)
            used.append(selection)
            return selection, used

        except:
            raise ValueError('invalid selection')

    else:
        print('modules available in {}:\n'.format(DIR_MODULES))
        print_list_cols(module_list)


def get_mode(expt):
    """
    Prints the available image modalities. Optionally prompts the user to
    select one.
    """
    if not DIR_DATA:
        logger.error('environment variable SCRIPTIT_DATA not defined.')
        sys.exit(1)

    # get a sorted list of the experiments
    expt = os.path.join(DIR_DATA, expt)
    subjects = [d for d in os.listdir(expt)
                        if os.path.isdir(os.path.join(expt, d))]

    mode_list = []
    for subj in subjects:
        subjdir = os.path.join(expt, subj)
        modes = [d for d in os.listdir(subjdir) if os.path.isdir(os.path.join(subjdir, d))]
        mode_list.extend(modes)

    mode_list = list(set(mode_list)) # keep unique entries
    try:
        selection = selector_list(mode_list)
        return selection
    except:
        return None

def get_experiments(check=None):
    """
    Prints the available experiments. Optionally prompts the user to select
    one.
    """
    if has_permissions(DIR_DATA) == False:
        logger.error('ERROR: You do not have write permission to {}'.format(DIR_DATA))
        sys.exit(1)

    # get a sorted list of the experiments
    expt_list = [d for d in os.listdir(DIR_DATA)
                         if os.path.isdir(os.path.join(DIR_DATA, d))]

    try:
        selection = selector_list(expt_list)

        # this is for the commandline usage
        if check == 'check':
            check_directories(selection)
        # this is an internal usage
        else:
            return selection

    except ValueError as ve:
        return None

def get_help(module):
    """
    Prints the module header line by line, wrapping long sections.
    """
    f = open(os.path.join(DIR_MODULES, module))
    helpfile = f.readlines()

    for line in helpfile:
        if line.startswith('#!'):
            pass
        elif line.startswith('#'):
            if len(line) < 80:
                print line.strip('#\n').lstrip(' ')
            else:
                print("\n".join(textwrap.wrap(line.strip('#').lstrip(' '))))
        else:
            break

def check_environment(mode='verbose'):
    """
    Checks manditory environent variables and exits if they defined improperly.
    """
    failed = False

    if DIR_DATA == None:
        logger.error('SCRIPTIT_DATA variable is not set.')
        failed = True
    if os.path.isdir(DIR_DATA) == False:
        logger.error('scriptit data directory does not exist: {}'.format(DIR_DATA))
        failed = True
    if has_permissions(DIR_DATA) == False:
        logger.error("no write permissions for {}".format(DIR_DATA))
        failed = True

    if DIR_MODULES == None:
        logger.error('SCRIPTIT_MODULES variable is not set')
        failed = True
    if os.path.isdir(DIR_MODULES) == False:
        logger.error('scriptit modules directory does not exist: {}'.format(DIR_MODULES))
        failed = True

    if failed:
        sys.exit(1)

    # format uses global variables defined at top of scriptit
    if mode == 'verbose':
        print('scriptit config:\n       DIR_DATA: {}\n    DIR_MODULES: {}\n'.format(DIR_DATA, DIR_MODULES))

def check_run(expt, subj, mode, sess, run):
    """
    Returns True if RUN folder contains a NIFTI file, False otherwise.
    """
    # retrieve the number of files within each run folder
    dir_file = os.path.join(DIR_DATA, expt, subj, mode, sess, run)
    file_list = [d for d in os.listdir(dir_file)
                         if os.path.isfile(os.path.join(dir_file, d))]

    n_files = filter(lambda x: x[-7:] == '.nii.gz' or
                               x[-4:] == '.nii', file_list)
    return len(n_files)

def check_mode(expt, subj, mode):
    """
    This returns each image modality's total number of runs and checks for run
    folders with missing data.
    """
    n_runs = 0

    # retrieve the sessions for a given image modality
    dir_mode = os.path.join(DIR_DATA, expt, subj, mode)
    sess_list = [d for d in os.listdir(dir_mode)
                         if os.path.isdir(os.path.join(dir_mode, d))]

    # retrieve runs for a given session
    for sess in sess_list:
        dir_sess = os.path.join(dir_mode, sess)
        run_list = [d for d in os.listdir(dir_sess)
                            if os.path.isdir(os.path.join(dir_sess, d))
                            and d[0:3] == 'RUN']

        # check for runs missing/too many NIFTI files, print warnings
        for run in run_list:
            n_files = check_run(expt, subj, mode, sess, run)
            n_runs = n_runs + n_files

            if n_files == 0:
                print('subject {}, {}, sess {}, run {} contains no NIFTI file.'.format(
                    str(subj), str(mode), str(sess), str(run)))

            if n_files > 1:
                print('subject {}, {}, sess {}, run {} contains {} NIFTI files.'.format(
                    str(subj), str(mode), str(sess), str(run), str(n_files)))
    return n_runs

def check_directories(expt):
    """
    This checks the image modalities for each subject in an experiment. It also
    reports the number of subjects with each kind of image modality.
    """
    if has_permissions(os.path.join(DIR_DATA, expt)) == False:
        sys.exit('ERROR: you do not have permissions to edit this experiment.')

    # attempt to access the subjects for a given experiment
    try:
        subjects = get_subj(os.path.join(DIR_DATA, expt))
    except:
        logger.error('experiment path is incorrect {}'.format(expt))

    # this dict will hold our count
    mode_dict = {}

    # loop through subjects, returning image modality counts, and record
    for subj in subjects:

        # retrieve the image modalities for a given subject
        dir_subj = os.path.join(DIR_DATA, expt, subj)
        mode_list = [d for d in os.listdir(dir_subj)
                             if os.path.isdir(os.path.join(dir_subj, d))]

        for mode in mode_list:
            # check inside each modality, get the number of sessions
            n_runs = check_mode(expt, subj, mode)

            # add them to the count
            try:
                mode_dict[str(mode)] = mode_dict[str(mode)] + n_runs
            except:
                mode_dict[str(mode)] = n_runs

    # print out the file counts per image modality
    print('')
    for mode_key in mode_dict:
        print('     {} NIFTIs in {}'.format(str(mode_dict[mode_key]), str(mode_key)))
    print('')


def get_loop(function, *args):
    """
    Runs the supplied function until the function no longer returns none.
    """
    var = None
    while var is None:
        var = function(*args)
    return var


def parse_master(script):
    """
    Parses submitted master script and checks formatting. Exits if any problems
    are found.
    """
    # read in master script
    masterData = [line.replace('=', ' ').rstrip() for line in open(script, 'rb')]

    # verify input script is formatted properly
    try:
        assert get_line(masterData, 'DIR_MODULES'), 'ERROR: DIR_MODULES not defined.'
        assert get_line(masterData, 'DIR_DATA'), 'ERROR: DIR_DATA not defined.'
        assert get_line(masterData, 'DIR_EXPT'), 'ERROR: DIR_EXPT not defined.'
        assert get_line(masterData, 'DATA_TYPE'), 'ERROR: DATA_TYPE not defined.'
        assert get_line(masterData, 'ID'), 'ERROR: ID not defined.'
    except AssertionError as err:
        logger.error(err)
        sys.exit(1)

    # verify we have at least one module defined that is also in DIR_MODULES
    moduleList = [f for f in os.listdir(DIR_MODULES)
                           if os.path.isfile(os.path.join(DIR_MODULES, f))]

    # return the modules defined in the master script that are ALSO in the
    # SCRIPTIT_MODULES folder
    moduleList.sort()
    foundModules = []
    for line in masterData:
        for m in moduleList:
            if line.split(' ')[0] == m:
                foundModules.append(m)

    if len(foundModules) == 0:
        logger.error('no modules in {} are defined in {}'.format(DIR_MODULES, script))
        sys.exit(1)

    return masterData, foundModules


def subject_list(experiment):
    """prints all subjects in experiment as a BASH list to STDOUT"""

    check_environment(mode='quiet')
    experiment_dir = os.path.join(DIR_DATA, experiment)
    if not os.path.isdir(experiment_dir):
        logger.error('experiment {} does not exist'.format(experiment_dir))
        sys.exit(1)

    subjects = get_subj(experiment_dir)
    output = '"'
    for subj in subjects:
        output+='{} '.format(subj)
    output = output.strip()
    output+='"'
    os.system('echo {}'.format(output))


def folder():
    """
    Generates a set of scriptit folders with defined EXPT, MODE, SESS, and RUN
    subfolders.
    """
    # make sure we have the appropriate permissions for the top directory
    if has_permissions(DIR_DATA) == False:
        sys.exit()

    # make experiment directory
    print('\nWhich experiment would you like to edit? ')
    data_list = [d for d in os.listdir(DIR_DATA) if
                            os.path.isdir(os.path.join(DIR_DATA, d)) == True]
    data_list.append('***NEW***')
    selection = selector_list(data_list)

    if selection == '***NEW***':
        try:
            print('Input new experiment name:')
            name = raw_input('Name: ')
            name = mangle_string(name)
            os.system('mkdir ' + os.path.join(DIR_DATA, name))
            print('Making experiment folder: ' + name)
        except:
            print('ERROR: You need permission to write to the data directory.')
            sys.exit()
    else:
        name = copy(selection)

    expt = os.path.join(DIR_DATA, name)

    # ensure we have the appropriate permissions (might be redundant)
    if has_permissions(expt) == False:
        sys.exit()

    # print a list of the subject, if they exist
    print('Current subjects: ')
    print_dirs(expt)

    # move on to a subject loop
    flag = 0
    while flag == 0:

        print('\nInput subject name:')

        subject = raw_input('Subject: ')
        subject = mangle_string(subject)
        print('Editing subject ' + str(subject))

        # make the subject folder, if it does not exist
        if os.path.isdir(os.path.join(expt, subject)) == False:
            os.system('mkdir ' + os.path.join(expt, subject))

        # edit subject, and check for the escape flag
        edit_subject(os.path.join(expt, subject))

        print('\nWould you like to continue adding subjects? (y/N)')
        response = raw_input('Continue? ')

        if response in ['Y', 'y']:
            pass
        else:
            flag = 1


def clean(script):
    """
    Removes stages of a script-it pipeline.
    """
    check_os()
    check_environment('quiet')
    masterData, foundModules = parse_master(script)

    DIR_MODULES = get_line(masterData, 'DIR_MODULES')[0]
    DIR_DATA = get_line(masterData, 'DIR_DATA')[0]
    expt = get_line(masterData, 'DIR_EXPT')[0]
    mode = get_line(masterData, 'DATA_TYPE')[0]
    #ID = get_line(masterData, 'ID')[0] # ignore ID for now, ID to depricate?

    # get the subjects
    print('clean all subjects, or some?')
    decision = get_loop(selector_list, ['all', 'some'])

    if decision == 'stop':
        sys.exit()

    elif decision == 'some':
        flag = 0
        subjects = []
        subj_list = get_subj(os.path.join(DIR_DATA, expt))

        while flag == 0:
            print("select subject to clean. type 'stop' to stop.")
            subj = get_loop(selector_list, subj_list)

            if subj == 'stop':
                flag = 1
                continue

            subjects.append(subj)
            subj_list.remove(subj)
            print('the following subjects are slated for clean:\n')
            print_list(subjects)

    elif decision == 'all':
        subjects = get_subj(os.path.join(DIR_DATA, expt))
        print('all subjects slated for clean.')

    # select cutoff module
    print('select cutoff module. the outputs of this module and all downstream modules will be removed.')
    cutoff = selector_list(foundModules, sort=False)
    modules = foundModules[foundModules.index(cutoff):]

    remove = []
    for module in modules:
        # parse header, get list of prefixes to remove
        header  = get_header(os.path.join(DIR_MODULES, module))
        output  = get_line(header, 'output:')
        others  = get_line(header, 'others:')

        if output:
            remove.append(output[0])
        if others:
            remove.extend(others)

    remove = (list(set(remove))) # not sure if i need this any longer...
    remove.sort()

    print('The following file types are slated to be removed:\n')
    print_list(remove)

    # loop through subjects, removing specified files in the selected modality
    for prefix in remove:
        for subj in subjects:
            to_remove = [x for x in find_files(
                 os.path.join(DIR_DATA, expt, subj, mode), prefix, exclude='RUN', level=2)][0]
            purge(to_remove)

def render(script, output):
    """
    Renders the submitted master script.
    """
    check_os()
    check_environment('quiet')
    datetime, user, f_id = get_date_user()
    masterData, foundModules = parse_master(script)

    # initalize the output script
    print('rendering master script {} to output {}'.format(script, output))
    f = open(output, 'wb')
    f.write('#!/bin/bash\n\n'
            '# rendered script-it from {script}\n'
            '# generated: {datetime} by {user}.\n\n'
            'set -e\n\n'
            'export DIR_MODULES={DIR_MODULES}\n'
            'export DIR_DATA={DIR_DATA}\n'
            'export DIR_EXPT={DIR_EXPT}\n'
            'export DATA_TYPE={DATA_TYPE}\n'
            'export ID={ID}\n'
            'export SUB=${{1}}\n\n'
            'if [ -z ${{1}} ]; then\n'
            '    echo "Usage:"\n'
            '    echo "    $(basename ${{0}}) subject"\n'
            '    exit 1\n'
            'fi\n'.format(
                script=script,
                user=user,
                datetime=datetime,
                DIR_MODULES=get_line(masterData, 'DIR_MODULES')[0],
                DIR_DATA=get_line(masterData, 'DIR_DATA')[0],
                DIR_EXPT=get_line(masterData, 'DIR_EXPT')[0],
                DATA_TYPE=get_line(masterData, 'DATA_TYPE')[0],
                ID=get_line(masterData, 'ID')[0]))

    # now, copy the contents of each script-it module to output, sans header
    for module in foundModules:
        for line in masterData:
            moduleBody = None # default value, if no module is found
            if line.startswith(module):

                # get module body (strip header)
                moduleBody = get_body(os.path.join(DIR_MODULES, module))

                # hard code command-line variables
                moduleBody = get_rendered_module(moduleBody, line)
                break

        if moduleBody:
            f.writelines(moduleBody)

    f.close()
    os.chmod(output, 0755)

def generate():
    """
    Runs the master script generator.
    """
    check_os()
    check_environment('quiet')
    datetime, user, f_id = get_date_user()

    # define experiment directory and check permissions
    print('\nSelect experiment:')
    expt = get_loop(get_experiments)
    if expt == 'stop':
        sys.exit()
    if has_permissions(os.path.join(DIR_DATA, expt)) == False:
        logger.error("You do not have permission to write in {}".format(os.path.join(DIR_DATA, expt)))
        sys.exit(1)

    print('\nexperiment: {}\nselect modality:'.format(expt))
    mode = get_loop(get_mode, expt)
    if mode == 'stop':
        sys.exit()

    # get the date and time, current user, f_id, set dir_pipe to be local
    print('\nmodality: {}\ninput ID for this run of scriptit:'.format(mode))
    ID = raw_input('ID: ')
    logger.debug('ID before mangling: {}'.format(ID))
    ID = mangle_string(ID)
    logger.debug('ID after mangling: {}'.format(ID))
    master = 'master_{}_{}.sh'.format(f_id, ID)

    print('\ninitializing master script.')
    f = open(os.path.join(DIR_DATA, expt, master), 'wb')
    f.write('#!/bin/bash\n\n'
            '# master scriptit for {expt}: {mode}.\n'
            '# generated: {datetime} by {user}.\n\n'
            'DIR_MODULES={DIR_MODULES}\n'
            'DIR_DATA={DIR_DATA}\n'
            'DIR_EXPT={expt}\n'
            'DATA_TYPE={mode}\n'
            'ID={ID}\n\n'.format(
                DIR_MODULES=DIR_MODULES, DIR_DATA=DIR_DATA, expt=expt,
                mode=mode, ID=ID, user=user, datetime=datetime))

    p_list = []      # keeps track of our command-list
    usedModules = [] # keeps track of the modules run
    outputFiles = [] # keeps track of each module's output
    flag = False
    module = None    # placeholder to keep debug happy

    while not flag:

        print('\nselect the next pipeline module:')
        logger.debug('pre-module selection:\n    module={}, usedModules={}'.format(module, usedModules))
        try:
            module, usedModules = get_modules(interactive=True, used=usedModules)
        except:
            continue

        logger.debug('post-module selection:\n    module={}, usedModules={}'.format(module, usedModules))
        if not module:
            continue
        elif module == 'stop':
            flag = True
            continue

        # parses module, write pipeline commands
        try:
            outputFiles, command = parse(os.path.join(DIR_MODULES, module), usedModules, outputFiles)
            p_list = writer(f, p_list, command)
        except Exception as err:
            if len(usedModules) > 0:
                usedModules.pop() # remove last module from the used list
            print(CLEARSCREEN)
            logger.error(err)
            continue

        print('\nCurrent pre-processing pipeline:')
        print_list(p_list)
        response = raw_input("Type 'stop' to stop, else continue: ")
        if response == 'stop':
            flag = True
        print(CLEARSCREEN)

    # close the file, make executable by owner + group, and execute
    print('saving master script: {}'.format(os.path.join(DIR_DATA, expt, master)))
    f.close()
    os.chmod(os.path.join(DIR_DATA, expt, master), 0755)

if __name__ == "__main__":

    logging.info('Starting')

    # debug handling
    if sys.argv[-1] == '--debug':
        nargs = len(sys.argv) - 1
        logger.setLevel(logging.DEBUG)
    else:
        nargs = len(sys.argv)

    if nargs == 3 and sys.argv[1] == 'list' and sys.argv[2] == 'modules':
        get_modules()
    elif nargs == 4 and sys.argv[1] == 'list' and sys.argv[2] == 'subjects':
        subject_list(sys.argv[3])
    elif nargs == 3 and sys.argv[1] == 'help':
        get_help(sys.argv[2])
    elif nargs == 3 and sys.argv[1] == 'check' and sys.argv[2] == 'setup':
        check_environment('verbose')
    elif nargs == 3 and sys.argv[1] == 'check' and sys.argv[2] == 'inputs':
        get_experiments(check='check')
    elif nargs == 2 and sys.argv[1] == 'generate':
        generate()
    elif nargs == 4 and sys.argv[1] == 'render':
        render(sys.argv[2], sys.argv[3])
    elif nargs == 2 and sys.argv[1] == 'folder':
        folder()
    elif nargs == 3 and sys.argv[1] == 'clean':
        clean(sys.argv[2])
    else:
        print(__doc__)
